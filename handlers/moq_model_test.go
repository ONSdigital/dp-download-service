// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers_test

import (
	"context"
	"github.com/ONSdigital/dp-download-service/handlers"
	"github.com/ONSdigital/dp-download-service/model"
	"sync"
)

// Ensure, that ModelMock does implement handlers.Model.
// If this is not the case, regenerate this file with moq.
var _ handlers.Model = &ModelMock{}

// ModelMock is a mock implementation of handlers.Model.
//
// 	func TestSomethingThatUsesModel(t *testing.T) {
//
// 		// make and configure a mocked handlers.Model
// 		mockedModel := &ModelMock{
// 			CreateFunc: func(ctx context.Context, payload *model.DatasetDocument) (string, error) {
// 				panic("mock out the Create method")
// 			},
// 		}
//
// 		// use mockedModel in code that requires handlers.Model
// 		// and then make assertions.
//
// 	}
type ModelMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, payload *model.DatasetDocument) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Payload is the payload argument value.
			Payload *model.DatasetDocument
		}
	}
	lockCreate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ModelMock) Create(ctx context.Context, payload *model.DatasetDocument) (string, error) {
	if mock.CreateFunc == nil {
		panic("ModelMock.CreateFunc: method is nil but Model.Create was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Payload *model.DatasetDocument
	}{
		Ctx:     ctx,
		Payload: payload,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, payload)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedModel.CreateCalls())
func (mock *ModelMock) CreateCalls() []struct {
	Ctx     context.Context
	Payload *model.DatasetDocument
} {
	var calls []struct {
		Ctx     context.Context
		Payload *model.DatasetDocument
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}
