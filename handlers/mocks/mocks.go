// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ONSdigital/dp-download-service/handlers (interfaces: VaultClient,S3Client,DatasetDownloads)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	downloads "github.com/ONSdigital/dp-download-service/downloads"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockVaultClient is a mock of VaultClient interface
type MockVaultClient struct {
	ctrl     *gomock.Controller
	recorder *MockVaultClientMockRecorder
}

// MockVaultClientMockRecorder is the mock recorder for MockVaultClient
type MockVaultClientMockRecorder struct {
	mock *MockVaultClient
}

// NewMockVaultClient creates a new mock instance
func NewMockVaultClient(ctrl *gomock.Controller) *MockVaultClient {
	mock := &MockVaultClient{ctrl: ctrl}
	mock.recorder = &MockVaultClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVaultClient) EXPECT() *MockVaultClientMockRecorder {
	return m.recorder
}

// ReadKey mocks base method
func (m *MockVaultClient) ReadKey(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadKey", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadKey indicates an expected call of ReadKey
func (mr *MockVaultClientMockRecorder) ReadKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadKey", reflect.TypeOf((*MockVaultClient)(nil).ReadKey), arg0, arg1)
}

// MockS3Client is a mock of S3Client interface
type MockS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockS3ClientMockRecorder
}

// MockS3ClientMockRecorder is the mock recorder for MockS3Client
type MockS3ClientMockRecorder struct {
	mock *MockS3Client
}

// NewMockS3Client creates a new mock instance
func NewMockS3Client(ctrl *gomock.Controller) *MockS3Client {
	mock := &MockS3Client{ctrl: ctrl}
	mock.recorder = &MockS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockS3Client) EXPECT() *MockS3ClientMockRecorder {
	return m.recorder
}

// GetWithPSK mocks base method
func (m *MockS3Client) GetWithPSK(arg0 string, arg1 []byte) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithPSK", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithPSK indicates an expected call of GetWithPSK
func (mr *MockS3ClientMockRecorder) GetWithPSK(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithPSK", reflect.TypeOf((*MockS3Client)(nil).GetWithPSK), arg0, arg1)
}

// MockDatasetDownloads is a mock of DatasetDownloads interface
type MockDatasetDownloads struct {
	ctrl     *gomock.Controller
	recorder *MockDatasetDownloadsMockRecorder
}

// MockDatasetDownloadsMockRecorder is the mock recorder for MockDatasetDownloads
type MockDatasetDownloadsMockRecorder struct {
	mock *MockDatasetDownloads
}

// NewMockDatasetDownloads creates a new mock instance
func NewMockDatasetDownloads(ctrl *gomock.Controller) *MockDatasetDownloads {
	mock := &MockDatasetDownloads{ctrl: ctrl}
	mock.recorder = &MockDatasetDownloadsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatasetDownloads) EXPECT() *MockDatasetDownloadsMockRecorder {
	return m.recorder
}

// GetDatasetVersionDownloads mocks base method
func (m *MockDatasetDownloads) GetDatasetVersionDownloads(arg0 context.Context, arg1 downloads.Parameters) (downloads.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasetVersionDownloads", arg0, arg1)
	ret0, _ := ret[0].(downloads.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasetVersionDownloads indicates an expected call of GetDatasetVersionDownloads
func (mr *MockDatasetDownloadsMockRecorder) GetDatasetVersionDownloads(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetVersionDownloads", reflect.TypeOf((*MockDatasetDownloads)(nil).GetDatasetVersionDownloads), arg0, arg1)
}

// GetFilterOutputDownloads mocks base method
func (m *MockDatasetDownloads) GetFilterOutputDownloads(arg0 context.Context, arg1 downloads.Parameters) (downloads.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilterOutputDownloads", arg0, arg1)
	ret0, _ := ret[0].(downloads.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilterOutputDownloads indicates an expected call of GetFilterOutputDownloads
func (mr *MockDatasetDownloadsMockRecorder) GetFilterOutputDownloads(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilterOutputDownloads", reflect.TypeOf((*MockDatasetDownloads)(nil).GetFilterOutputDownloads), arg0, arg1)
}
