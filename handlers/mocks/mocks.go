// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ONSdigital/dp-download-service/handlers (interfaces: Downloader,S3Content)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	downloads "github.com/ONSdigital/dp-download-service/downloads"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockDownloader is a mock of Downloader interface
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDownloader) Get(arg0 context.Context, arg1 downloads.Parameters, arg2 downloads.FileType, arg3 string) (downloads.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(downloads.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDownloaderMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDownloader)(nil).Get), arg0, arg1, arg2, arg3)
}

// MockS3Content is a mock of S3Content interface
type MockS3Content struct {
	ctrl     *gomock.Controller
	recorder *MockS3ContentMockRecorder
}

// MockS3ContentMockRecorder is the mock recorder for MockS3Content
type MockS3ContentMockRecorder struct {
	mock *MockS3Content
}

// NewMockS3Content creates a new mock instance
func NewMockS3Content(ctrl *gomock.Controller) *MockS3Content {
	mock := &MockS3Content{ctrl: ctrl}
	mock.recorder = &MockS3ContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockS3Content) EXPECT() *MockS3ContentMockRecorder {
	return m.recorder
}

// StreamAndWrite mocks base method
func (m *MockS3Content) StreamAndWrite(arg0 context.Context, arg1, arg2 string, arg3 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamAndWrite", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamAndWrite indicates an expected call of StreamAndWrite
func (mr *MockS3ContentMockRecorder) StreamAndWrite(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamAndWrite", reflect.TypeOf((*MockS3Content)(nil).StreamAndWrite), arg0, arg1, arg2, arg3)
}
