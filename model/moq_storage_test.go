// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package model_test

import (
	"context"
	"github.com/ONSdigital/dp-download-service/model"
	"github.com/ONSdigital/dp-download-service/storage"
	"sync"
)

// Ensure, that StorageMock does implement model.Storage.
// If this is not the case, regenerate this file with moq.
var _ model.Storage = &StorageMock{}

// StorageMock is a mock implementation of model.Storage.
//
// 	func TestSomethingThatUsesStorage(t *testing.T) {
//
// 		// make and configure a mocked model.Storage
// 		mockedStorage := &StorageMock{
// 			CreateDatasetFunc: func(ctx context.Context, document *storage.DatasetDocument) error {
// 				panic("mock out the CreateDataset method")
// 			},
// 		}
//
// 		// use mockedStorage in code that requires model.Storage
// 		// and then make assertions.
//
// 	}
type StorageMock struct {
	// CreateDatasetFunc mocks the CreateDataset method.
	CreateDatasetFunc func(ctx context.Context, document *storage.DatasetDocument) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateDataset holds details about calls to the CreateDataset method.
		CreateDataset []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Document is the document argument value.
			Document *storage.DatasetDocument
		}
	}
	lockCreateDataset sync.RWMutex
}

// CreateDataset calls CreateDatasetFunc.
func (mock *StorageMock) CreateDataset(ctx context.Context, document *storage.DatasetDocument) error {
	if mock.CreateDatasetFunc == nil {
		panic("StorageMock.CreateDatasetFunc: method is nil but Storage.CreateDataset was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Document *storage.DatasetDocument
	}{
		Ctx:      ctx,
		Document: document,
	}
	mock.lockCreateDataset.Lock()
	mock.calls.CreateDataset = append(mock.calls.CreateDataset, callInfo)
	mock.lockCreateDataset.Unlock()
	return mock.CreateDatasetFunc(ctx, document)
}

// CreateDatasetCalls gets all the calls that were made to CreateDataset.
// Check the length with:
//     len(mockedStorage.CreateDatasetCalls())
func (mock *StorageMock) CreateDatasetCalls() []struct {
	Ctx      context.Context
	Document *storage.DatasetDocument
} {
	var calls []struct {
		Ctx      context.Context
		Document *storage.DatasetDocument
	}
	mock.lockCreateDataset.RLock()
	calls = mock.calls.CreateDataset
	mock.lockCreateDataset.RUnlock()
	return calls
}
