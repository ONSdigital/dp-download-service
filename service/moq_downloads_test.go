// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service_test

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/dataset"
	"github.com/ONSdigital/dp-api-clients-go/filter"
	"github.com/ONSdigital/dp-api-clients-go/image"
	"github.com/ONSdigital/dp-download-service/downloads"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that DatasetClientMock does implement downloads.DatasetClient.
// If this is not the case, regenerate this file with moq.
var _ downloads.DatasetClient = &DatasetClientMock{}

// DatasetClientMock is a mock implementation of downloads.DatasetClient.
//
// 	func TestSomethingThatUsesDatasetClient(t *testing.T) {
//
// 		// make and configure a mocked downloads.DatasetClient
// 		mockedDatasetClient := &DatasetClientMock{
// 			CheckerFunc: func(ctx context.Context, check *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetVersionFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, datasetID string, edition string, version string) (dataset.Version, error) {
// 				panic("mock out the GetVersion method")
// 			},
// 		}
//
// 		// use mockedDatasetClient in code that requires downloads.DatasetClient
// 		// and then make assertions.
//
// 	}
type DatasetClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *healthcheck.CheckState) error

	// GetVersionFunc mocks the GetVersion method.
	GetVersionFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, datasetID string, edition string, version string) (dataset.Version, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *healthcheck.CheckState
		}
		// GetVersion holds details about calls to the GetVersion method.
		GetVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// DownloadServiceToken is the downloadServiceToken argument value.
			DownloadServiceToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// DatasetID is the datasetID argument value.
			DatasetID string
			// Edition is the edition argument value.
			Edition string
			// Version is the version argument value.
			Version string
		}
	}
	lockChecker    sync.RWMutex
	lockGetVersion sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *DatasetClientMock) Checker(ctx context.Context, check *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("DatasetClientMock.CheckerFunc: method is nil but DatasetClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedDatasetClient.CheckerCalls())
func (mock *DatasetClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetVersion calls GetVersionFunc.
func (mock *DatasetClientMock) GetVersion(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, datasetID string, edition string, version string) (dataset.Version, error) {
	if mock.GetVersionFunc == nil {
		panic("DatasetClientMock.GetVersionFunc: method is nil but DatasetClient.GetVersion was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		UserAuthToken        string
		ServiceAuthToken     string
		DownloadServiceToken string
		CollectionID         string
		DatasetID            string
		Edition              string
		Version              string
	}{
		Ctx:                  ctx,
		UserAuthToken:        userAuthToken,
		ServiceAuthToken:     serviceAuthToken,
		DownloadServiceToken: downloadServiceToken,
		CollectionID:         collectionID,
		DatasetID:            datasetID,
		Edition:              edition,
		Version:              version,
	}
	mock.lockGetVersion.Lock()
	mock.calls.GetVersion = append(mock.calls.GetVersion, callInfo)
	mock.lockGetVersion.Unlock()
	return mock.GetVersionFunc(ctx, userAuthToken, serviceAuthToken, downloadServiceToken, collectionID, datasetID, edition, version)
}

// GetVersionCalls gets all the calls that were made to GetVersion.
// Check the length with:
//     len(mockedDatasetClient.GetVersionCalls())
func (mock *DatasetClientMock) GetVersionCalls() []struct {
	Ctx                  context.Context
	UserAuthToken        string
	ServiceAuthToken     string
	DownloadServiceToken string
	CollectionID         string
	DatasetID            string
	Edition              string
	Version              string
} {
	var calls []struct {
		Ctx                  context.Context
		UserAuthToken        string
		ServiceAuthToken     string
		DownloadServiceToken string
		CollectionID         string
		DatasetID            string
		Edition              string
		Version              string
	}
	mock.lockGetVersion.RLock()
	calls = mock.calls.GetVersion
	mock.lockGetVersion.RUnlock()
	return calls
}

// Ensure, that FilterClientMock does implement downloads.FilterClient.
// If this is not the case, regenerate this file with moq.
var _ downloads.FilterClient = &FilterClientMock{}

// FilterClientMock is a mock implementation of downloads.FilterClient.
//
// 	func TestSomethingThatUsesFilterClient(t *testing.T) {
//
// 		// make and configure a mocked downloads.FilterClient
// 		mockedFilterClient := &FilterClientMock{
// 			CheckerFunc: func(ctx context.Context, check *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetOutputFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, filterOutputID string) (filter.Model, error) {
// 				panic("mock out the GetOutput method")
// 			},
// 		}
//
// 		// use mockedFilterClient in code that requires downloads.FilterClient
// 		// and then make assertions.
//
// 	}
type FilterClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *healthcheck.CheckState) error

	// GetOutputFunc mocks the GetOutput method.
	GetOutputFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, filterOutputID string) (filter.Model, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *healthcheck.CheckState
		}
		// GetOutput holds details about calls to the GetOutput method.
		GetOutput []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// DownloadServiceToken is the downloadServiceToken argument value.
			DownloadServiceToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// FilterOutputID is the filterOutputID argument value.
			FilterOutputID string
		}
	}
	lockChecker   sync.RWMutex
	lockGetOutput sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *FilterClientMock) Checker(ctx context.Context, check *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("FilterClientMock.CheckerFunc: method is nil but FilterClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedFilterClient.CheckerCalls())
func (mock *FilterClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetOutput calls GetOutputFunc.
func (mock *FilterClientMock) GetOutput(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, filterOutputID string) (filter.Model, error) {
	if mock.GetOutputFunc == nil {
		panic("FilterClientMock.GetOutputFunc: method is nil but FilterClient.GetOutput was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		UserAuthToken        string
		ServiceAuthToken     string
		DownloadServiceToken string
		CollectionID         string
		FilterOutputID       string
	}{
		Ctx:                  ctx,
		UserAuthToken:        userAuthToken,
		ServiceAuthToken:     serviceAuthToken,
		DownloadServiceToken: downloadServiceToken,
		CollectionID:         collectionID,
		FilterOutputID:       filterOutputID,
	}
	mock.lockGetOutput.Lock()
	mock.calls.GetOutput = append(mock.calls.GetOutput, callInfo)
	mock.lockGetOutput.Unlock()
	return mock.GetOutputFunc(ctx, userAuthToken, serviceAuthToken, downloadServiceToken, collectionID, filterOutputID)
}

// GetOutputCalls gets all the calls that were made to GetOutput.
// Check the length with:
//     len(mockedFilterClient.GetOutputCalls())
func (mock *FilterClientMock) GetOutputCalls() []struct {
	Ctx                  context.Context
	UserAuthToken        string
	ServiceAuthToken     string
	DownloadServiceToken string
	CollectionID         string
	FilterOutputID       string
} {
	var calls []struct {
		Ctx                  context.Context
		UserAuthToken        string
		ServiceAuthToken     string
		DownloadServiceToken string
		CollectionID         string
		FilterOutputID       string
	}
	mock.lockGetOutput.RLock()
	calls = mock.calls.GetOutput
	mock.lockGetOutput.RUnlock()
	return calls
}

// Ensure, that ImageClientMock does implement downloads.ImageClient.
// If this is not the case, regenerate this file with moq.
var _ downloads.ImageClient = &ImageClientMock{}

// ImageClientMock is a mock implementation of downloads.ImageClient.
//
// 	func TestSomethingThatUsesImageClient(t *testing.T) {
//
// 		// make and configure a mocked downloads.ImageClient
// 		mockedImageClient := &ImageClientMock{
// 			CheckerFunc: func(ctx context.Context, check *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetDownloadVariantFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, imageID string, variant string) (image.ImageDownload, error) {
// 				panic("mock out the GetDownloadVariant method")
// 			},
// 		}
//
// 		// use mockedImageClient in code that requires downloads.ImageClient
// 		// and then make assertions.
//
// 	}
type ImageClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *healthcheck.CheckState) error

	// GetDownloadVariantFunc mocks the GetDownloadVariant method.
	GetDownloadVariantFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, imageID string, variant string) (image.ImageDownload, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *healthcheck.CheckState
		}
		// GetDownloadVariant holds details about calls to the GetDownloadVariant method.
		GetDownloadVariant []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// ImageID is the imageID argument value.
			ImageID string
			// Variant is the variant argument value.
			Variant string
		}
	}
	lockChecker            sync.RWMutex
	lockGetDownloadVariant sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ImageClientMock) Checker(ctx context.Context, check *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ImageClientMock.CheckerFunc: method is nil but ImageClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedImageClient.CheckerCalls())
func (mock *ImageClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetDownloadVariant calls GetDownloadVariantFunc.
func (mock *ImageClientMock) GetDownloadVariant(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, imageID string, variant string) (image.ImageDownload, error) {
	if mock.GetDownloadVariantFunc == nil {
		panic("ImageClientMock.GetDownloadVariantFunc: method is nil but ImageClient.GetDownloadVariant was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		ImageID          string
		Variant          string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		ImageID:          imageID,
		Variant:          variant,
	}
	mock.lockGetDownloadVariant.Lock()
	mock.calls.GetDownloadVariant = append(mock.calls.GetDownloadVariant, callInfo)
	mock.lockGetDownloadVariant.Unlock()
	return mock.GetDownloadVariantFunc(ctx, userAuthToken, serviceAuthToken, collectionID, imageID, variant)
}

// GetDownloadVariantCalls gets all the calls that were made to GetDownloadVariant.
// Check the length with:
//     len(mockedImageClient.GetDownloadVariantCalls())
func (mock *ImageClientMock) GetDownloadVariantCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	ImageID          string
	Variant          string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		ImageID          string
		Variant          string
	}
	mock.lockGetDownloadVariant.RLock()
	calls = mock.calls.GetDownloadVariant
	mock.lockGetDownloadVariant.RUnlock()
	return calls
}
